(custom-set-variables
 ;; Show column number on the status line
 '(column-number-mode t)
 '(current-language-environment "UTF-8")
 '(safe-local-variable-values (quote ((encoding . utf-8))))
 '(show-paren-mode t))


;;;;;;;;;;;;
;; Reference
;; http://dotfiles.org/~battlemidget/.emacs
;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;
;; emacs base setting
;; // emacs base setting
;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;
;; Font
;; 윈도우 + 나눔고딕코딩
(custom-set-faces
 '(default ((t (
                :family "NanumGothicCoding"
                        :foundry "outline"
                        :slant normal
                        :weight normal
                        :height 143
                        :width normal)))))

;; 리눅스 한글 설정: 나눔고딕코딩
;; http://kiros33.blog.me/130138066686
(if (eq system-type 'gnu/linux)
    (progn
      (set-fontset-font "fontset-default"
                        'korean-ksc5601
                        "-unknown-NanumGothicCoding-normal-normal-normal-*-*-*-*-*-d-0-iso10646-1")
      (setq initial-frame-alist '((top . 10) (left . 100)))))
;; // Font
;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Hangul/Encoding Environment
;; 한영키 바꿔치기. 콘솔에서는 필요없지만 GUI사용할때 대비
(set-language-environment "Korean")
(prefer-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(global-set-key (kbd "<S-kana>") 'toggle-input-method)
(global-set-key (kbd "<kana>") 'toggle-input-method)
;; // Hangul/Encoding Environment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;
;; Cask
(require 'cask "~/.cask/cask.el")
(cask-initialize)
;; // Cask
;;;;;;;;;;


;;;;;;;;;;
;; Key Map

;; Alt-F4 = quit
(global-set-key (kbd "<M-f4>") 'save-buffers-kill-terminal)

;; // Key Map
;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;
;; color-theme
;; 2014-09-19 기준으로 el-get + color-theme가 먹히지 않는다
;; 원인은 color-theme의 기본 저장소인
;; http://download.savannah.gnu.org/releases/color-theme/color-theme-6.6.0.zip
;; 를 받을수 없기 때문인것으로 보인다. (Index는 접근되면서 파일받기는 안된다니...)
;; 그래서 따로 구해서 저장소에 때려박았다.
;; 사용된 코드 : https://github.com/jwiegley/color-theme
(add-to-list 'load-path "~/.emacs.d/ext/color-theme")
(require 'color-theme)
(color-theme-initialize)

(defun set-color-theme-dispatch-platform ()
  (if (eq system-type 'windows-nt)
      ;; for windows
      (color-theme-euphoria)
      ;; other platform, like linux console + putty
      (color-theme-lethe)))
(set-color-theme-dispatch-platform)

;;(color-theme-dark-laptop)
;;(color-theme-arjen)
;;(color-theme-hober)
;; for window color
;;(color-theme-clarity)
;; for linux console color
;;(color-theme-digital-ofs1)
;; // color-theme
;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;
;; Editor Common

;; default indent
;; http://emacswiki.org/emacs/IndentingC
(setq-default indent-tabs-mode t)
(setq-default tab-width 4)
(setq tab-stop-list (number-sequence 4 200 4))
(setq indent-line-function 'insert-tab)
(setq lisp-body-indent 2)
(setq c-default-style "stroustrup")
(setq c-basic-offset 4)

;; new lines at the end
(setq next-line-add-newlines t)

;; http://www.emacswiki.org/emacs/DeletingWhitespace
;; do not use global scope before-save-hook.
;; because in markdown, trailing two spaces means newline.
;; (add-hook 'before-save-hook 'delete-trailing-whitespace)
;; detect major mode
;; http://stackoverflow.com/questions/6312202/detect-current-major-mode-in-emacs-from-lisp
(defvar delete-trailing-whitespace-language-list
  '(lisp-mode
    emacs-lisp-mode
    python-mode
    scheme-mode
    php-mode
    js-mode
    coffee-mode
    c-mode
    ruby-mode
    c++-mode
    shell-script-mode
    slim-mode
    web-mode
    latex-mode))
(defun my-delete-trailing-whitespace()
  (if (member major-mode delete-trailing-whitespace-language-list)
      (delete-trailing-whitespace)))
(add-hook 'before-save-hook 'my-delete-trailing-whitespace)

;; http://www.emacswiki.org/emacs/EndOfLineTips
(defun unix-file ()
  "Change the current buffer to Latin 1 with Unix line-ends."
  (interactive)
  (set-buffer-file-coding-system 'utf-8-unix t))
(defun dos-file ()
  "Change the current buffer to Latin 1 with DOS line-ends."
  (interactive)
  (set-buffer-file-coding-system 'utf-8-dos t))
(defun mac-file ()
  "Change the current buffer to Latin 1 with Mac line-ends."
  (interactive)
  (set-buffer-file-coding-system 'utf-8-dos t))

;;(defun no-dos-please-were-unixish ()
;;  (let ((coding-str (symbol-name buffer-file-coding-system)))
;;    (when (string-match "-dos$" coding-str)
;;      (setq coding-str
;;            (concat (substring coding-str 0 (match-beginning 0)) "-unix"))
;;      (message "CODING: %s" coding-str)
;;      (set-buffer-file-coding-system (intern coding-str)))))
;;(add-hook 'find-file-hooks 'no-dos-please-were-unixish)

;; // Editor Common
;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;
;; temp / backup file

;; not use emacs backup file
;; http://stackoverflow.com/questions/2680389/how-to-remove-all-files-ending-with-made-by-emacs
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
      )

;; http://stackoverflow.com/questions/8246483/emacs-how-to-disable-files-creation
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
;; // temp / backup file
;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Language + Language Plugin
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;
;; lisp
(add-hook 'lisp-mode-hook
  (lambda ()
    (setq indent-tabs-mode nil)
    (setq tab-width 2)
    (set (make-local-variable 'lisp-indent-function)
         'common-lisp-indent-function)))
;; // lisp
;;;;;;;;;;

;;;;;;;;;;;;;
;; emacs lisp
;; http://www.emacswiki.org/emacs/EmacsLispMode
(add-to-list 'auto-mode-alist '(".emacs" . lisp-mode))
(add-hook 'emacs-lisp-mode-hook
  (lambda ()
    (setq tab-width 2)
    ;; Use spaces, not tabs.
    (setq indent-tabs-mode nil)
    (put 'add-hook 'lisp-indent-function 1)
    (put 'function 'lisp-indent-function 2)))
;; // emacs lisp
;;;;;;;;;;;;;;;;

;;;;;;;;;
;; scheme
(add-hook 'scheme-mode-hook
  (lambda ()
    (setq tab-width 2)
    (setq indent-tabs-mode nil)))
(add-to-list 'auto-mode-alist '("\\.rkt" . scheme-mode))

;; scheme-complete
;; 2014-12-31 기준으로 el-get + scheme-complete가 먹히지 않는다.
;; 그래서 외부 저장소 이용
(add-to-list 'load-path "~/.emacs.d/ext/scheme-complete")
;; // scheme-complete

;; // scheme
;;;;;;;;;;;;;;;;

;;;;;;;;;
;; Python
(add-hook 'python-mode-hook
  (lambda ()
    (setq python-indent 4)))

;; jedi - python ide
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:setup-keys t)                      ; optional
(setq jedi:complete-on-dot t)                 ; optional
;; // jedi

;; // Python
;;;;;;;;;;;;

;;;;;;;
;; HTML
;; use web-mode
;;(add-hook 'html-mode-hook
;;  (lambda ()
;;    (setq tab-width 2)
;;     (setq sgml-basic-offset 2)
;;     (setq indent-tabs-mode nil)
;;     ;; Default indentation is usually 2 spaces, changing to 4.
;;     (set (make-local-variable 'sgml-basic-offset) 4)))
;; (add-to-list 'auto-mode-alist '("\\.ejs" . html-mode))
;; // html
;;;;;;;;;;

;;;;;;;;;;;;;;
;; nxml - for xml
;; http://www.dpawson.co.uk/relaxng/nxml/nxmlGeneral.html#d357e432
;; indent setting
(setq nxml-child-indent 4)
;; // nxml
;;;;;;;;;;;;;;

;;;;;;
;; PHP
(autoload 'php-mode "php-mode" "Major mode for editing php code." t)
(add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
(add-to-list 'auto-mode-alist '("\\.inc$" . php-mode))
(setq php-mode-force-pear t)
(add-hook 'php-mode-hook
  (lambda ()
    (setq c-default-style "stroustrup")
    (setq indent-tabs-mode nil)
    (setq tab-width 4)
    (setq c-basic-indent 4)))
;; // PHP
;;;;;;;;;

;;;;;;;;;;;;;
;; javascript
(add-hook 'js-mode-hook
  (lambda ()
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 2)
    (setq js-indent-level 2)
    (setq default-tab-width 2)
    (setq tab-stop-list (number-sequence 2 200 2))))
;; // javascript
;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;
;; coffeescript
(add-hook 'coffee-mode-hook
  (lambda ()
    ;; automatically clean up bad whitespace
    (setq whitespace-action '(auto-cleanup))
    ;; only show bad whitespace
    (setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab))
    ;; This gives you a tab of 2 spaces
    (setq coffee-tab-width 2)))
;; // coffee script
;;;;;;;;;;;;;;;;;;;

;;;;;;;;;
;; matlab
;; http://www.emacswiki.org/MatlabMode
(add-to-list 'load-path "~/.emacs.d/matlab-emacs")
(autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
(add-to-list
 'auto-mode-alist
 '("\\.m$" . matlab-mode))
(setq matlab-indent-function t)
(setq matlab-shell-command "matlab")
;; // matlab
;;;;;;;;;;;;

;;;;;;;;;;;
;; markdown
;; http://jblevins.org/projects/markdown-mode/
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
(add-hook 'markdown-mode-hook
  (lambda ()
    (setq markdown-coding-system 'utf-8)
    (setq-default tab-width 4)
    (setq-default indent-tabs-mode nil)))
;; // markdown
;;;;;;;;;;;;;;

;;;;;;;;;
;; Prolog
;; perl을 쓰진 않을테니까 .pl을 Prolog로 변경
(add-to-list 'auto-mode-alist '("\\.pl$" . prolog-mode))
;; // Prolog
;;;;;;;;;;;;

;;;;;;;
;; ruby
;; http://stackoverflow.com/questions/6453955/how-do-i-prevent-emacs-from-adding-coding-information-in-the-first-line
(setq ruby-insert-encoding-magic-comment nil)
;; http://stackoverflow.com/questions/7404816/emacs-ruby-mode-indenting-wildly-inside-parentheses
(setq ruby-deep-indent-paren nil)
(add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile.lock$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("rakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("rakefile\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\.rake$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\.gemspec$" . ruby-mode))
;; // ruby
;;;;;;;;;;

;;;;;;;;;;;;;;;
;; shell-script
(add-to-list 'auto-mode-alist '("zshrc$" . shell-script-mode))
;; // shell-script
;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; web-mode - template engine (etc, etc)
;; http://web-mode.org/
;; css / html
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
;; django / flask
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jinja2\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jinja\\'" . web-mode))
;; php
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
;; ruby / erb
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
;; javascript
(add-to-list 'auto-mode-alist '("\\.ejs" . web-mode))
;; etc
(add-to-list 'auto-mode-alist '("\\.scss?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))


(add-hook 'web-mode-hook
  (lambda ()
    ;; basic tab
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 2)
    ;; indent
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)
    ;; left padding
    (setq web-mode-style-padding 2)
    (setq web-mode-script-padding 2)
    (setq web-mode-block-padding 0)
    ;; comment
    (setq web-mode-comment-style 2)))

;; Auto-pairs
(setq web-mode-extra-auto-pairs
      '(("erb" . (("beg" "end")))
        ("php" . (("beg" "end")
                  ("beg" "end")))
        ))
(setq web-mode-enable-auto-pairing t)

;; // web-mode
;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; yaml-mode
(add-to-list 'auto-mode-alist '("\.yml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\.yaml$" . yaml-mode))

;; // yaml-mode
;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; dockerfile-mode
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
;; // dockerfile-mode
;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; // Language + Language Plugin
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;
;; vcs
(setq
 ;; don't show annoing startup msg
 inhibit-startup-message t
 ;; NO annoing backups
 make-backup-files nil
 ;; make sure file ends with NEWLINE
 require-final-newline t
 ;; follow symlinks and don't ask
 vc-follow-symlinks t
 ;; display time in the modeline
 display-time-24hr-format t
 display-time-day-and-date t)
;; // vcs
;;;;;;;;;

;;;;;;;;;;;;;;;;;;;
;; whitespace-mode
;; http://emacswiki.org/emacs/WhiteSpace
(require 'whitespace)
(autoload 'whitespace-mode           "whitespace" "Toggle whitespace visualization."        t)
(autoload 'whitespace-toggle-options "whitespace" "Toggle local `whitespace-mode' options." t)
(setq whitespace-style (quote (spaces tabs space-mark tab-mark)))
;; // whitespace-mode
;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
;; External Plugin

;; twittering-mode
;;(require 'twittering-mode)
;;(setq twittering-use-master-password t)
;;(twittering-enable-unread-status-notifier)
;; //twittering-mode


;; raindow-delimiters
(require 'rainbow-delimiters)
;; enable in all programming-related modes
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
;; // rainbow-delemiters

;; highlight-current-line
;; http://emacsblog.org/2007/04/09/highlight-the-current-line/
(require 'highlight-current-line)
(highlight-current-line-on t)

;; putty
(set-face-background 'highlight-current-line-face "black")
;; osx iterm
;; (set-face-background 'highlight-current-line-face "magenta")
;; // highlight-current-line

;; // External Plugin
;;;;;;;;;;;;;;;;;;;;;

;; http://stackoverflow.com/questions/10026221/enable-all-disabled-commands-permanently
;; Enable all disabled commands permanently
(put 'set-goal-column 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'scroll-left 'disabled nil)
(put 'erase-buffer 'disabled nil)
