function Zsh::init {
	# Path to your oh-my-zsh configuration.
	ZSH=~/.oh-my-zsh

	# Set name of the theme to load.
	# Look in ~/.oh-my-zsh/themes/
	# Optionally, if you set this to "random", it'll load a random theme each
	# time that oh-my-zsh is loaded.
	ZSH_THEME="gianu"

	# Set this to use case-sensitive completion
	# CASE_SENSITIVE="true"

	# Uncomment this to disable bi-weekly auto-update checks
	# DISABLE_AUTO_UPDATE="true"

	# Uncomment to change how often to auto-update? (in days)
	export UPDATE_ZSH_DAYS=13

	# Uncomment following line if you want to disable colors in ls
	# DISABLE_LS_COLORS="true"

	# Uncomment following line if you want to disable autosetting terminal title.
	# DISABLE_AUTO_TITLE="true"

	# Uncomment following line if you want to disable command autocorrection
	# DISABLE_CORRECTION="true"

	# Uncomment following line if you want red dots to be displayed while waiting for completion
	# COMPLETION_WAITING_DOTS="true"

	# Uncomment following line if you want to disable marking untracked files under
	# VCS as dirty. This makes repository status check for large repositories much,
	# much faster.
	# DISABLE_UNTRACKED_FILES_DIRTY="true"

	# Uncomment following line if you want to the command execution time stamp shown
	# in the history command output.
	# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
	HIST_STAMPS="yyyy/mm/dd"

	# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
	# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
	# Example format: plugins=(rails git textmate ruby lighthouse)
	plugins=(
		debian tmux
		git github git-flow
		node npm grunt coffee
		pip python fabric
		ruby rails
	)

	source $ZSH/oh-my-zsh.sh
}


function System::release_name {
	DEBIAN_RELEASE_FILE="/etc/lsb-release"
	REDHAT_RELEASE_FILE="/etc/redhat-release"

	if [ -f $DEBIAN_RELEASE_FILE ]; then
		# ubuntu, debian, etc
		local DIST_NAME=`sed -n 's/^DISTRIB_ID=//p' $DEBIAN_RELEASE_FILE`
		local DIST_VERSION=`sed -n 's/^DISTRIB_RELEASE=//p' $DEBIAN_RELEASE_FILE`
		DIST_FULLNAME="$DIST_NAME $DIST_VERSION"
	elif [ -f $REDHAT_RELEASE_FILE ]; then
		# centos
		DIST_FULLNAME=`cat $REDHAT_RELEASE_FILE`
	elif [ -d "/Applications" ]; then
		local DIST_NAME=$(sw_vers -productName)
		local DIST_VERSION=$(sw_vers -productVersion)
		local DIST_BUILD=$(sw_vers -buildVersion)
		DIST_FULLNAME="$DIST_NAME $DIST_VERSION $DIST_BUILD"
	else
		DIST_FULLNAME="Unknown Distribution"
	fi
}

function System::environment {
	if [[ $USER == "haruna" ]]; then
		ENV_NAME="Work"
	elif [[ $USER == "amane" ]]; then
		ENV_NAME="Work"
	elif [[ $USER == "pi" ]]; then
		ENV_NAME="Raspberry Pi"
	else
		ENV_NAME="Home"
	fi
}

function System::env_hook_rpi {
	alias ssh-pi="ssh pi@192.168.0.16"
}

function System::init {
	System::release_name
	System::environment

	if [[ $ENV_NAME == "pi" ]]; then
		System_env_hook_rpi
	fi
}

function System::display {
	echo "Hello, $USER."
	echo ""
	echo "## Environment"
	echo "User\t\t: ${USER}"
	echo "Computer\t: ${DIST_FULLNAME}"
	echo "Environment\t: ${ENV_NAME}"
	echo ""
}

function Shell::init {
	# User configuration
	export PATH="/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"
	export MANPATH="/usr/local/man:$MANPATH"
	export PATH="/home/${USER}/bin:$PATH"

	# # Preferred editor for local and remote sessions
	if [[ -n $SSH_CONNECTION ]]; then
		export EDITOR='vim'
	else
		export EDITOR='vim'
	fi
	export VISUAL=$EDITOR

	# Compilation flags
	export ARCHFLAGS="-arch x86_64"

	# python encoding
	export PYTHONIOENCODING="utf-8"

	# ssh
	export SSH_KEY_PATH="~/.ssh/id_rsa"

	Shell::alias
}

function Shell::alias {
	alias cd...='cd ../..'
	alias cd....='cd ../../..'
	alias cd.....='cd ../../../..'
	alias cd......='cd ../../../../..'

	# https://twitter.com/liamosaur/status/506975850596536320
	# fuck is sudo with previous command
	# below command work on bash, not zsh.
	# alias fuck='sudo $(history -p \!\!)'
	# use simple command
	# http://www.commandlinefu.com/commands/view/13/run-the-last-command-as-root
	# sudo !!
	#alias fuck='sudo $(!!)'
}

ANDROID_ROOT_DIR_LIST=(
	~/android
	/opt
	/opt/android
)

function Android::init {
	Android::sdk_init
	Android::ndk_init
	Android::ccache
}

function Android::sdk_init {
	Android::set_sdk_dir ""
	if [ ! -d "/Applications" ]; then
		local ANDROID_SDK_NAME="android-sdk-linux"
	else
		local ANDROID_SDK_NAME="adt-bundle-mac-x86_64"
	fi

	# find android sdk
	for ANDROID_ROOT_DIR in ${ANDROID_ROOT_DIR_LIST[@]}; do
		local TARGET_DIR=${ANDROID_ROOT_DIR}/${ANDROID_SDK_NAME}
		if [ -d $TARGET_DIR ]; then
			Android::set_sdk_dir $TARGET_DIR
			return
		fi
	done
}

function Android::ndk_init {
	Android::set_ndk_dir ""

	# find android ndk
	for ANDROID_ROOT_DIR in ${ANDROID_ROOT_DIR_LIST[@]}; do
		if [ ! -d $ANDROID_ROOT_DIR ]; then
			continue;
		fi

		for f in $(ls $ANDROID_ROOT_DIR | sort -r); do
			local TARGET=${ANDROID_ROOT_DIR}/$f
			if [ -f $TARGET ]; then
				continue
			fi
			if [[ $f == *"ndk"* ]]; then
				Android::set_ndk_dir $TARGET
			fi
		done
	done
}

function Android::set_sdk_dir {
	if [[ "$1" == "" ]]; then
		unset ANDROID_SDK_ROOT
	else
		export PATH=$1/platform-tools:$PATH
		export PATH=$1/tools:$PATH
		export ANDROID_SDK_ROOT=$1
	fi
}

function Android::set_ndk_dir {
	if [[ "$1" == "" ]]; then
		unset ANDROID_NDK_VERSION
		unset ANDROID_NDK_ROOT
		unset NDK_ROOT
	else
		# example : android-ndk-r8e 
		export ANDROID_NDK_VERSION=`expr "$1" : '.*ndk-\(r[0-9]*[a-z]\)'`
		export ANDROID_NDK_ROOT=$1
		export NDK_ROOT=$1
		export PATH=${ANDROID_NDK_ROOT}:$PATH
	fi
}

function Android::display {
	echo "## Android"

	if [[ $ANDROID_SDK_ROOT == "" ]]; then
		echo "Android SDK is not exist"
	else
		echo "Android SDK\t: ${ANDROID_SDK_ROOT}"
	fi

	if [[ $ANDROID_NDK_ROOT == "" ]]; then
		echo "Android NDK is not exist"
	else
		echo "Android NDK(${ANDROID_NDK_VERSION}): ${ANDROID_NDK_ROOT}"
	fi

	if [[ $NDK_CCACHE == "" ]]; then
		echo "ccache is not exist"
	else
		echo "ccache\t\t: Enabled"
	fi
	echo ""
}

function Android::ccache {
	# ccache
	local CCACHE_PATH=/usr/lib/ccache
	if [ -d $CCACHE_PATH ]; then
		export PATH=/usr/lib/ccache:$PATH
		export NDK_CCACHE=`which ccache`
	else
		unset NDK_CCACHE
	fi
}


function Android::reset_adb {
	# http://stackoverflow.com/questions/9210152/set-up-device-for-development-no-permissions
	# Fix this problem
	# List of devices attached
	# ????????????    no permissions
	# Configure udev or use root permission
	# I use root permission becuase zshrc configuration file is used in many computer.
	sudo adb kill-server
	sudo adb start-server
	sudo adb devices
}

function Android::setup {
	#http://stackoverflow.com/questions/22701405/aapt-ioexception-error-2-no-such-file-or-directory-why-cant-i-build-my-grad
	# for x86_64 + android sdk
	sudo apt-get install lib32stdc++6 lib32z1
}


function Ruby::init {
	export PATH="$HOME/.rbenv/bin:$PATH"
	export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"
	eval "$(rbenv init -)" || 1
}

function MacOSX::init {
	if [ ! -d "/Applications" ]; then
		return
	fi

	echo "## MacOSX "

	# mysql
	# http://stackoverflow.com/questions/10557507/rails-mysql-on-osx-library-not-loaded-libmysqlclient-18-dylib
	MYSQL=/usr/local/mysql/bin
	if [ -d $MYSQL ]; then
		echo "mysql detected"
		export PATH=$PATH:$MYSQL
		export DYLD_LIBRARY_PATH=/usr/local/mysql/lib:$DYLD_LIBRARY_PATH
	fi

	# emacs
	local emacs_path="/usr/local/opt/emacs/bin"
	if [ -d $emacs_path ]; then
		echo "emacs detected"
		export PATH=/usr/local/opt/emacs/bin:$PATH
	fi

	# hangul locale
	export LC_ALL="ko_KR.UTF-8"
	export LANG="ko_KR.UTF-8"

	echo ""
}

function Local::init {
	local zshrc_local="$HOME/.zshrc.local"
	if [ ! -f $zshrc_local ]; then
		return
	fi

	echo "## Local"
	echo "Include Local zshrc"
	source $zshrc_local
	echo ""
}



Zsh::init
Shell::init
System::init
System::display
Ruby::init
Android::init
Android::display
MacOSX::init
Local::init

# automatic added
# added by travis gem
[ -f /home/haruna/.travis/travis.sh ] && source /home/haruna/.travis/travis.sh
